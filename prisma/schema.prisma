// This is your Prisma schema file

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int               @id @default(autoincrement())
  email                 String            @unique
  password              String?
  googleId              String?           @unique
  provider              String            @default("email") // email, google
  role                  String            @default("user") // user, admin
  planType              String            @default("free") // free, pro_trial, pro_paid
  trialStartDate        DateTime?
  subscriptionEndDate   DateTime?
  monthlyQuestionCount  Int               @default(0)
  lastQuestionResetDate DateTime?         @default(now())
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  practiceSessions PracticeSession[]
  answers          Answer[]
  payments         Payment[]
  events           Event[]
  questionViews    QuestionView[]

  @@index([email])
  @@index([googleId])
  @@index([planType])
}

model Question {
  id          Int             @id @default(autoincrement())
  text        String          @db.Text
  category    String          // Categories from NextLeap: Guesstimates, Product Design, Metrics, Product Strategy, Root Cause Analysis, etc.
  tags        String?         @db.Text // JSON array as string - additional metadata
  source      String          @default("nextleap") // nextleap, curated, user_generated
  company     String?         @db.Text // JSON array of companies where question was asked
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  answers     Answer[]
  views       QuestionView[]

  @@index([category])
  @@index([source])
}

model PracticeSession {
  id          Int       @id @default(autoincrement())
  userId      Int
  status      String    @default("active") // active, completed
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     Answer[]
  
  @@index([userId])
  @@index([status])
}

model Answer {
  id                Int              @id @default(autoincrement())
  practiceSessionId Int?             // Nullable for anonymous users
  userId            Int?             // Nullable for anonymous users
  questionId        Int
  answerText        String           @db.Text
  transcript        String?          @db.Text // Future use for voice transcripts
  timeTaken         Int?             // Time in seconds (nullable for backward compatibility)
  status            String           @default("submitted") // submitted, scored, needs_review
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  practiceSession   PracticeSession? @relation(fields: [practiceSessionId], references: [id], onDelete: Cascade)
  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  question          Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  scores            Score?
  events            Event[]
  
  @@index([practiceSessionId])
  @@index([userId])
  @@index([status])
}

model Score {
  id              Int       @id @default(autoincrement())
  answerId        Int       @unique
  structure       Int       // 0-10
  metrics         Int       // 0-10
  prioritization  Int       // 0-10
  userEmpathy     Int       // 0-10
  communication   Int       // 0-10
  feedback        String    @db.Text
  sampleAnswer    String    @db.Text
  totalScore      Int       // Sum or average
  status          String    @default("completed") // completed, needs_review
  tokensUsed      Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  answer          Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@index([answerId])
  @@index([status])
}

model Payment {
  id                      Int       @id @default(autoincrement())
  userId                  Int
  razorpaySubscriptionId  String?   @unique
  razorpayCustomerId      String?
  razorpayPaymentId       String?
  amount                  Int       // in paise (INR) or cents (USD)
  currency                String    @default("usd") // usd or inr
  status                  String    // pending, completed, failed, cancelled
  subscriptionType        String?   // free, pro
  subscriptionEndDate     DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([razorpaySubscriptionId])
}

model Event {
  id          Int       @id @default(autoincrement())
  userId      Int?
  answerId    Int?
  eventType   String    // api_request, openai_call, error, webhook
  metadata    String?   @db.Text // JSON metadata
  tokensUsed  Int       @default(0)
  createdAt   DateTime  @default(now())
  
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  answer      Answer?   @relation(fields: [answerId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([answerId])
  @@index([eventType])
  @@index([createdAt])
}

model QuestionView {
  id          Int       @id @default(autoincrement())
  userId      Int
  questionId  Int
  viewedAt    DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@index([userId])
  @@index([questionId])
}

model AnonymousSession {
  id                  Int       @id @default(autoincrement())
  fingerprint         String    @unique
  ipAddress           String
  questionCount       Int       @default(0)
  lastQuestionDate    DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  @@index([fingerprint])
  @@index([ipAddress])
}

model NewsletterSubscription {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  status      String    @default("active") // active, unsubscribed
  source      String    @default("landing_page") // landing_page, pricing_page, etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([email])
  @@index([status])
}
